name: Debug Machine with Warp and Mihomo

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ========== 基础配置 ==========
      - name: Checkout repository
        uses: actions/checkout@v3

      # ========== 安装依赖 ==========
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl \
            jq \
            wireguard \
            resolvconf \
            gzip

      # ========== 安装 wgcf ==========
      - name: Install wgcf
        run: |
          curl -fsSL https://github.com/ViRb3/wgcf/releases/download/v2.2.18/wgcf_2.2.18_linux_amd64 -o wgcf
          chmod +x wgcf
          sudo mv wgcf /usr/local/bin/wgcf

      # ========== 注册 Warp 并生成 WireGuard 配置文件 ==========
      - name: Register Warp and generate WireGuard config
        run: |
          wgcf register --accept-tos --config wgcf-account.toml
          wgcf generate --config wgcf-account.toml --profile wgcf-profile.conf
          
          # 修改配置文件以确保所有流量都走 WireGuard
          sed -i 's/AllowedIPs = 0.0.0.0\/0/AllowedIPs = 0.0.0.0\/1, 128.0.0.0\/1/g' wgcf-profile.conf
          sed -i 's/AllowedIPs = ::\/0/AllowedIPs = ::\/1, 8000::\/1/g' wgcf-profile.conf
          
          # 将配置文件移动到 WireGuard 的配置目录
          sudo cp wgcf-profile.conf /etc/wireguard/wg0.conf
          
          # 启动 WireGuard 接口
          sudo wg-quick up wg0
          
          # 验证 WireGuard 连接
          sudo wg show
          ip route show
          curl --interface wg0 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" https://api.ip.sb/geoip

      # ========== 配置 Mihomo 本地代理 ==========
      - name: Setup Mihomo
        run: |
          echo "当前目录: $(pwd)"
          mkdir -p .mihomo
          cd .mihomo
          echo "下载 Mihomo 文件..."
          
          # 使用 WireGuard 接口下载
          curl --interface wg0 -L -o mihomo-linux-amd64-v1.18.0.gz https://github.com/MetaCubeX/mihomo/releases/download/v1.18.0/mihomo-linux-amd64-v1.18.0.gz
          
          # 检查文件是否下载成功
          if [ ! -f mihomo-linux-amd64-v1.18.0.gz ]; then
            echo "文件下载失败！"
            exit 1
          fi
          
          echo "解压文件..."
          gzip -d mihomo-linux-amd64-v1.18.0.gz
          
          # 检查解压后的文件是否存在
          if [ ! -f mihomo-linux-amd64-v1.18.0 ]; then
            echo "文件解压失败！"
            exit 1
          fi
          
          echo "重命名文件..."
          mv mihomo-linux-amd64-v1.18.0 mihomo
          echo "设置可执行权限..."
          chmod +x mihomo
          echo "Mihomo 安装完成！"

      - name: Write YAML config file
        run: |
          cd .mihomo
          curl --interface wg0 -L -o config.yaml "${{ secrets.CONFIG_URL }}"

      - name: Download Web UI (Yacd)
        run: |
          curl --interface wg0 -L -o yacd.tar.xz https://github.com/haishanh/yacd/releases/download/v0.3.8/yacd.tar.xz
          tar -xJvf yacd.tar.xz
          mv public yacd
          mkdir -p .mihomo/ui
          mv yacd/* .mihomo/ui/

      - name: Start mihomo with Web UI
        run: |
          cd .mihomo
          echo "external-ui: ui" >> config.yaml
          
          # 设置路由规则，确保 Mihomo 的出口流量通过 WireGuard
          sudo ip route add default dev wg0 table 200
          sudo ip rule add fwmark 0xca6c lookup 200
          
          # 启动 Mihomo
          ./mihomo -d . -f config.yaml &
          sleep 10

      # ========== 配置本地代理环境变量 ==========
      - name: Configure proxy env
        run: |
          echo 'function proxy_on() {
            export http_proxy=http://127.0.0.1:7890
            export https_proxy=http://127.0.0.1:7890
            export all_proxy=socks5://127.0.0.1:7890
            echo -e "终端代理已开启"
          }
          function proxy_off(){
            unset http_proxy https_proxy all_proxy
            echo -e "终端代理已关闭"
          }' > ~/.bash_profile
          source ~/.bash_profile
          proxy_on

      # ========== 动态选择最快节点 ==========
      - name: Select fastest node
        run: |
          # 等待 Mihomo API 就绪
          sleep 10
          
          response=$(curl -s http://127.0.0.1:9090/proxies/🔰%20选择节点)
          echo "所有节点信息: $response"

          nodes=$(echo "$response" | jq -r '.all[] | @uri')
          echo "可用节点: $nodes"

          fastest_node=""
          min_delay=999999
          for node in $nodes; do
            if [ "$node" == "DIRECT" ]; then
              echo "跳过 DIRECT 节点"
              continue
            fi
            echo "测试节点: $node"

            delay=$(curl -o /dev/null -s -w "%{time_total}\n" -x http://127.0.0.1:7890 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" http://1.1.1.1 --connect-timeout 10 --max-time 10)
            if [ $? -ne 0 ]; then
              echo "节点 $node 不可用，跳过"
              continue
            fi
            echo "节点 $node 的延迟: $delay 秒"

            if (( $(echo "$delay < $min_delay" | bc -l) ); then
              min_delay=$delay
              fastest_node=$node
            fi
          done

          echo "最快节点: $fastest_node, 延迟: $min_delay 秒"
          curl -X PUT http://127.0.0.1:9090/proxies/🔰%20选择节点 -d "{\"name\":\"$(echo -n $fastest_node | jq -sRr @uri)\"}"
          echo "已选择最快节点: $fastest_node"

      # ========== 验证代理链 ==========
      - name: Test Proxy Chain
        run: |
          echo "测试 Mihomo 代理（7890 端口）："
          curl -x http://127.0.0.1:7890 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" https://api.ip.sb/geoip

          echo "测试双重代理（Mihomo -> WireGuard）："
          curl -x http://127.0.0.1:7890 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" https://api.ip.sb/geoip

      # ========== 后续步骤（保持原有配置）==========
      - name: Install VNC and Desktop
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            xfce4 \
            xfce4-goodies \
            tightvncserver \
            novnc \
            firefox \
            xclip

      - name: Configure VNC
        run: |
          mkdir -p ~/.vnc
          echo "password" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd

          echo -e "SendPrimary=1\nAcceptCutText=1" > ~/.vnc/config

          echo '#!/bin/bash
          source ~/.bash_profile
          export DISPLAY=:1
          vncconfig -nowin &
          #startxfce4 &' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup

      - name: Start VNC Server
        run: |
          vncserver :1 -geometry 1280x800 -depth 24
          sleep 5

      - name: Configure noVNC
        run: |
          git clone https://github.com/novnc/noVNC.git
          cd noVNC
          ./utils/novnc_proxy --vnc localhost:5901 &

      - name: Start Cloudflared
        run: |
          cloudflared tunnel --url tcp://localhost:5901 --protocol http2 &
          cloudflared tunnel --url http://localhost:9090 &
          cloudflared tunnel --url http://localhost:6080 &
          sleep 10

      - name: Keep Alive
        run: |
          while true; do
            echo "[$(date +'%F %T')] 服务状态："
            echo "1. VNC 进程: $(pgrep -a Xvnc || echo '未运行')"
            echo "2. 剪贴板守护进程: $(pgrep -a vncconfig || echo '未运行')"
            echo "3. WireGuard 状态: $(sudo wg show)"
            echo "4. Mihomo 进程: $(pgrep -a mihomo || echo '未运行')"
            sleep 300
          done
