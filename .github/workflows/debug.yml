name: Debug Machine with Warp

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ========== 基础配置 ==========
      - name: Checkout repository
        uses: actions/checkout@v3

      # ========== 安装 Cloudflare Warp ==========
      - name: Install Cloudflare Warp
        run: |
          # 添加 Cloudflare Warp 官方源
          curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
          
          # 安装 Warp
          sudo apt update
          sudo apt install -y cloudflare-warp

          # 注册 Warp
          warp-cli registration new --accept-tos
          warp-cli set-mode proxy
          warp-cli set-proxy-port 40000  # Warp SOCKS5 代理端口
          warp-cli connect
          warp-cli enable-always-on

          # 验证 Warp 连接
          warp-cli status

      # ========== 配置本地代理（7890 端口）==========
      - name: Setup Mihomo
        uses: ./
        with:
          config-url: ${{ secrets.CONFIG_URL }}
          mihomo-version: "1.18.0"

      - name: Configure proxy env
        run: |
          echo 'function proxy_on() {
            export http_proxy=http://127.0.0.1:7890
            export https_proxy=http://127.0.0.1:7890
            export all_proxy=socks5://127.0.0.1:7890
            echo -e "终端代理已开启"
          }
          function proxy_off(){
            unset http_proxy https_proxy all_proxy
            echo -e "终端代理已关闭"
          }' > ~/.bash_profile
          source ~/.bash_profile
          proxy_on

      # ========== 配置 Warp 作为最终出口 ==========
      - name: Configure Warp as Final Proxy
        run: |
          # 设置环境变量，将流量通过 Warp 代理（40000 端口）
          echo 'export HTTP_PROXY=socks5://127.0.0.1:40000
          export HTTPS_PROXY=socks5://127.0.0.1:40000
          export ALL_PROXY=socks5://127.0.0.1:40000' >> ~/.bash_profile
          source ~/.bash_profile

      # ========== 验证代理链 ==========
      - name: Test Proxy Chain
        run: |
          # 验证 Warp 代理
          echo "测试 Warp 代理（40000 端口）："
          curl --socks5 127.0.0.1:40000 https://api.ip.sb/geoip

          # 验证双重代理（本地代理 + Warp）
          echo "测试双重代理（本地代理 -> Warp）："
          curl -x http://127.0.0.1:7890 --socks5 127.0.0.1:40000 https://api.ip.sb/geoip

      # ========== 后续步骤（保持原有配置）==========
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

      - name: Install VNC and Desktop
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            xfce4 \
            xfce4-goodies \
            tightvncserver \
            novnc \
            firefox \
            xclip

      - name: Configure VNC
        run: |
          mkdir -p ~/.vnc
          echo "password" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          echo -e "SendPrimary=1\nAcceptCutText=1" > ~/.vnc/config
          
          echo '#!/bin/bash
          source ~/.bash_profile
          export DISPLAY=:1
          vncconfig -nowin &
          startxfce4 &' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup

      - name: Start VNC Server
        run: |
          vncserver :1 -geometry 1280x800 -depth 24
          sleep 5

      - name: Configure noVNC
        run: |
          git clone https://github.com/novnc/noVNC.git
          cd noVNC
          ./utils/novnc_proxy --vnc localhost:5901 &

      - name: Start Cloudflared
        run: |
          cloudflared tunnel --url tcp://localhost:5901 --protocol http2 &
          cloudflared tunnel --url http://localhost:9090 &
          cloudflared tunnel --url http://localhost:6080 &
          sleep 10

      - name: Keep Alive
        run: |
          while true; do
            echo "[$(date +'%F %T')] 服务状态："
            echo "1. VNC 进程: $(pgrep -a Xvnc || echo '未运行')"
            echo "2. 剪贴板守护进程: $(pgrep -a vncconfig || echo '未运行')"
            sleep 300
          done
