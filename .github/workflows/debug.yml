name: Debug Machine

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup mihomo
        uses: ./ # 使用当前仓库中的 action
        with:
          config-url: ${{ secrets.CONFIG_URL }} # Clash YAML 订阅链接
          mihomo-version: "1.18.0" # 可选，默认是 1.18.0

      - name: Install jq and bc
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Select fastest node
        run: |
          # 获取所有节点信息
          response=$(curl -s http://127.0.0.1:9090/proxies/🔰%20选择节点)
          echo "所有节点信息: $response"

          # 提取节点名称并进行 URL 编码
          nodes=$(echo "$response" | jq -r '.all[] | @uri')
          echo "可用节点: $nodes"

          # 测试每个节点的延迟
          fastest_node=""
          min_delay=999999

          for node in $nodes; do
            # 跳过 DIRECT 节点
            if [ "$node" == "DIRECT" ]; then
              echo "跳过 DIRECT 节点"
              continue
            fi

            echo "测试节点: $node"
            delay=$(curl -o /dev/null -s -w "%{time_total}\n" -x http://127.0.0.1:7890 http://1.1.1.1 --connect-timeout 10 --max-time 10)
            if [ $? -ne 0 ]; then
              echo "节点 $node 不可用，跳过"
              continue
            fi
            echo "节点 $node 的延迟: $delay 秒"

            # 比较延迟，选择最快的节点
            if (( $(echo "$delay < $min_delay" | bc -l) )); then
              min_delay=$delay
              fastest_node=$node
            fi
          done

          echo "最快节点: $fastest_node, 延迟: $min_delay 秒"

          # 选择最快节点
          curl -X PUT http://127.0.0.1:9090/proxies/🔰%20选择节点 -d "{\"name\":\"$(echo -n $fastest_node | jq -sRr @uri)\"}"
          echo "已选择最快节点: $fastest_node"

      - name: Test proxy
        run: |
          curl -x http://127.0.0.1:7890 https://api.ip.sb/geoip

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

#novnc
      - name: Install VNC and Desktop Environment
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            xfce4 \
            xfce4-goodies \
            tightvncserver \
            novnc \
            python3 \
            python3-pip \
            git

      - name: Configure VNC
        run: |
          mkdir -p ~/.vnc
          echo "password" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          echo '#!/bin/bash
          xrdb $HOME/.Xresources
          startxfce4 &' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup

      - name: Start VNC Server
        run: |
          vncserver :1 -geometry 1280x800 -depth 24
          sleep 5  # Wait for VNC server to start properly

      - name: Install and Setup noVNC
        run: |
          git clone https://github.com/novnc/noVNC.git
          cd noVNC
          ./utils/novnc_proxy --vnc localhost:5901 & #novnc web端口6080
          
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Start Cloudflared for Mihomo Web UI
        run: |
          # 暴露 Mihomo Web UI 端口 9090
          cloudflared tunnel --url http://localhost:9090 &
          echo "等待 Mihomo Web UI 的 Cloudflared 隧道URL..."
          sleep 10
          ps aux | grep cloudflared

      - name: Start Cloudflared for noVNC
        run: |
          # 暴露 noVNC 端口 5800
          cloudflared tunnel --url http://localhost:6080 &
          echo "等待 noVNC 的 Cloudflared 隧道URL..."
          sleep 10
          ps aux | grep cloudflared

      - name: Keep Alive and Monitor
        run: |
          echo "=== Firefox VNC Server Information ==="
          echo "noVNC端口: 5800"
          echo "VNC端口: 5900"
          echo "VNC密码: admin"
          echo "说明: 使用浏览器连接时，主机地址使用上面cloudflared生成的域名"
          echo "端口使用: 复制cloudflared URL后的端口号"

          echo "=== Mihomo Web UI Information ==="
          echo "Web UI端口: 9090"
          echo "说明: 使用浏览器连接时，主机地址使用上面cloudflared生成的域名"
          echo "端口使用: 复制cloudflared URL后的端口号"

          while true; do
            echo "=== Status Update $(date) ==="
            docker ps
            sleep 300
          done
