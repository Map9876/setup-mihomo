name: Remote Dev Environment

on:
  workflow_dispatch:

jobs:
  remote-desktop:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6小时超时

    steps:
    # ========== 初始化阶段 ==========
    - name: Checkout repository
      uses: actions/checkout@v4

    # ========== 网络代理配置 ==========
    - name: Setup Clash
      uses: https://github.com/vergoh/vncactions-proxy.git@main
      with:
        config-url: ${{ secrets.CONFIG_URL }}
        clash-version: "1.18.0"

    - name: Configure Proxy
      run: |
        echo 'export http_proxy=http://127.0.0.1:7890
        export https_proxy=http://127.0.0.1:7890
        export all_proxy=socks5://127.0.0.1:7890' >> ~/.bashrc
        source ~/.bashrc

    # ========== 环境准备阶段 ==========
    - name: Install Base Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git curl wget jq \
          xfce4 xfce4-terminal \
          tightvncserver novnc \
          firefox xclip

    # ========== VNC服务配置 ==========
    - name: Configure VNC
      run: |
        mkdir -p ~/.vnc
        # 密码设置 (明文"password")
        echo 'password' | vncpasswd -f > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd

        # VNC服务端配置
        cat > ~/.vnc/config <<EOF
        geometry=1920x1080
        depth=24
        SendPrimary=1
        AcceptCutText=1
        SendCutText=1
        Clipboard=1
        alwaysshared
        EOF

        # X启动脚本
        cat > ~/.vnc/xstartup <<'EOF'
        #!/bin/bash
        unset SESSION_MANAGER
        exec /bin/sh /etc/xdg/xfce4/xinitrc
        
        # 剪贴板守护进程
        vncconfig -nowin -poll 100 -encodings "tight copyrect hextile" &
        
        # 桌面环境
        startxfce4 &
        
        # 浏览器配置
        export MOZ_ENABLE_WAYLAND=0 #浏览器（如Firefox）的Wayland支持可能会影响剪贴板在X11环境下的工作，因此需要禁用Wayland，强制使用X11后端。这通过设置环境变量MOZ_ENABLE_WAYLAND=0来实现。
        export GDK_BACKEND=x11
        firefox --no-remote --kiosk https://github.com &
        EOF
        chmod +x ~/.vnc/xstartup

    # ========== 服务启动阶段 ==========
    - name: Start VNC Server
      run: |
        vncserver :1 -fg -localhost no \
          -geometry 1920x1080 \
          -depth 24 \
          -SecurityTypes VncAuth \
          -SendCutText=1 -AcceptCutText=1 \
          -Clipboard=1
      

    - name: Start noVNC Proxy
      run: |
        git clone --depth 1 https://github.com/novnc/noVNC.git
        cd noVNC
        ./utils/novnc_proxy --vnc localhost:5901 --listen 6080
      

    # ========== 隧道穿透配置 ==========
    - name: Setup Cloudflared Tunnels
      run: |
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
        chmod +x cloudflared-linux-amd64
        
        # VNC服务隧道
        nohup ./cloudflared-linux-amd64 tunnel --url tcp://localhost:5901 > vnc-tunnel.log 2>&1 &
        
        # noVNC Web隧道
        nohup ./cloudflared-linux-amd64 tunnel --url http://localhost:6080 > novnc-tunnel.log 2>&1 &
        
        sleep 10  # 等待隧道建立
        echo "VNC Tunnel URL:"
        grep -o 'https://.*.trycloudflare.com' vnc-tunnel.log
        echo "noVNC Tunnel URL:"
        grep -o 'https://.*.trycloudflare.com' novnc-tunnel.log

    # ========== 功能验证阶段 ==========
    - name: Clipboard Test
      run: |
        # 写入测试内容到服务器剪贴板
        echo "SERVER_TEST_$(date +%s)" | xclip -sel clip
        
        # 模拟客户端输入
        echo "CLIENT_TEST_$(date +%s)" > /tmp/client-clip.txt
        DISPLAY=:1 xclip -i -sel clip < /tmp/client-clip.txt
        
        # 验证双向同步
        echo "服务器剪贴板内容："
        xclip -o -sel clip
        echo "客户端模拟内容："
        cat /tmp/client-clip.txt

    # ========== 状态监控阶段 ==========
    - name: Monitor Services
      run: |
        echo "=== 实时服务状态 ==="
        while true; do
          echo "[$(date +%T)] 进程状态："
          pgrep -a Xvnc || echo "Xvnc not running!"
          pgrep -a cloudflared || echo "Cloudflared not running!"
          
          echo "剪贴板内容监控："
          xclip -o -sel clip 2>/dev/null || echo "空剪贴板"
          
          sleep 30
        done
