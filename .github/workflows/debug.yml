name: Debug Machine

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ========== 原有配置（完全保留）==========
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Mihomo
        uses: ./
        with:
          config-url: ${{ secrets.CONFIG_URL }}
          mihomo-version: "1.18.0"

      - name: Configure proxy env
        run: |
          echo 'function proxy_on() {
            export http_proxy=http://127.0.0.1:7890
            export https_proxy=http://127.0.0.1:7890
            export all_proxy=socks5://127.0.0.1:7890
          }' >> ~/.bashrc
          source ~/.bashrc
          proxy_on

      # ========== 新增剪贴板配置（保持密码不变）==========
      - name: Enhance VNC Clipboard
        run: |
          # 安装剪贴板支持组件
          sudo apt-get install -y xclip xsel

          # 配置VNC剪贴板（不修改密码）
          mkdir -p ~/.vnc
          echo -e "SendPrimary=1\nAcceptCutText=1\nSendCutText=1" > ~/.vnc/config

          # 更新xstartup（保持原有代理配置）
          sed -i '/startxfce4/i \
          # 剪贴板守护进程（新增）\
          vncconfig -nowin -set SendPrimary=1 -set AcceptCutText=1 -set SendCutText=1 \&\
          ' ~/.vnc/xstartup

          # 浏览器剪贴板兼容性配置（新增）
          sed -i '/firefox/i \
          export MOZ_ENABLE_WAYLAND=0\
          export GDK_BACKEND=x11\
          ' ~/.vnc/xstartup

      # ========== 原有服务配置（仅增强参数）==========
      - name: Start VNC Server
        run: |
          vncserver :1 -geometry 1280x800 -depth 24 \
            -SendCutText=1 \      # 新增参数
            -AcceptCutText=1 \    # 新增参数
            -Clipboard=1          # 新增参数
          sleep 5

      # ========== 新增剪贴板验证步骤 ==========
      - name: Verify Clipboard
        run: |
          # 写入测试内容到服务器剪贴板
          echo "VNC_CLIPBOARD_TEST" | xclip -selection clipboard
          
          # 从客户端读取验证（模拟）
          echo "请手动验证客户端剪贴板是否包含: VNC_CLIPBOARD_TEST"
          
          # 保持服务运行（原有配置） 
          while true; do
            echo "[$(date)] 服务运行中..."
            sleep 300
          done

      # ========== 以下为原有配置（完全不变）==========
      - name: Install jq and bc
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Select fastest node
        run: |
          response=$(curl -s http://127.0.0.1:9090/proxies/🔰%20选择节点)
          nodes=$(echo "$response" | jq -r '.all[] | @uri')
          fastest_node=""
          min_delay=999999
          for node in $nodes; do
            [ "$node" == "DIRECT" ] && continue
            delay=$(curl -o /dev/null -s -w "%{time_total}\n" -x http://127.0.0.1:7890 http://1.1.1.1)
            (( $(echo "$delay < $min_delay" | bc -l) )) && min_delay=$delay && fastest_node=$node
          done
          curl -X PUT http://127.0.0.1:9090/proxies/🔰%20选择节点 -d "{\"name\":\"$(echo -n $fastest_node | jq -sRr @uri)\"}"

      - name: Test proxy
        run: curl -x http://127.0.0.1:7890 https://api.ip.sb/geoip

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

      - name: Install VNC and Desktop
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            xfce4 \
            xfce4-goodies \
            tightvncserver \
            novnc \
            firefox

      - name: Configure Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb

      - name: Start Cloudflared tunnels
        run: |
          cloudflared tunnel --url tcp://localhost:5901 --protocol http2 &
          cloudflared tunnel --url http://localhost:9090 &
          cloudflared tunnel --url http://localhost:6080 &
          sleep 10
